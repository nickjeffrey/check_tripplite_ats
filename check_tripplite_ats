#!/usr/bin/perl -w


# CHANGE LOG
# ----------
# 2024/01/29	njeffrey	Script created to monitor Tripp-Lite Automatic Transfer Switch (ATS)


# nagios check to query Tripp-Lite ATS via SNMP


# NOTES
# -----
#
#
#  This script should return one (and only one) line of ouput.  Multiple lines of output are silently ignored by nagios.
#
#  The line of output will become the body of the alert message sent by nagios
#
#
#  This script queries a remote host via SNMP
#
#  You will need a section in the services.cfg
#  file on the nagios server that looks similar to the following.
#      # Define a service to check the Tripp-Lite Automatic Transfer Switch (ATS)
#      # Parameters are SNMP community name
#      define service {
#              use                             generic-service
#              hostgroup_name                  all_tripplite_ats
#              service_description             ATS health
#              check_command                   check_tripplite_ats!public
#              }
#
#
#  You will also need a command definition similar to the following in commands.cfg on the nagios server
#      # 'check_tripplite_ats' command definition for ATS (Automatic Transfer Switch)
#      # parameters are -H hostname -C snmp_community
#      define command{
#              command_name    check_tripplite_ats
#              command_line    $USER1$/check_tripplite_ats -H $HOSTADDRESS$ -C $ARG1$
#              }
#
#

# Different Network management cards may use slightly different OID values.  
# Here are a few from the TRIPPLITE-PRODUCTS MIB
#  tlpDeviceManufacturer                .1.3.6.1.4.1.850.1.1.1.2.1.4       Manufacturer
#  tlpDeviceModel                       .1.3.6.1.4.1.850.1.1.1.2.1.5       Model designation
#  tlpDeviceName                        .1.3.6.1.4.1.850.1.1.1.2.1.6       Hostname assigned by sysadmin
#  tlpDeviceID          l               .1.3.6.1.4.1.850.1.1.1.2.1.7       User assigned ID 
#  tlpDeviceLocation                    .1.3.6.1.4.1.850.1.1.1.2.1.8       Room or rack location assigned by sysadmin
#  tlpDeviceRegion                      .1.3.6.1.4.1.850.1.1.1.2.1.9       User-supplied geographic region
#
#  tlpAtsIdentNumInputs                 .1.3.6.1.4.1.850.1.1.3.4.1.2.1.1   The number of inputs  supported by the Automatic Transfer Switch (ATS)
#  tlpAtsIdentNumOutputs                .1.3.6.1.4.1.850.1.1.3.4.1.2.1.2   The number of outputs supported by the Automatic Transfer Switch (ATS)
#  tlpAtsIdentNumPhases                 .1.3.6.1.4.1.850.1.1.3.4.1.2.1.3   The number of phases supported by each input of the ATS
#  tlpAtsIdentNumOutlets                .1.3.6.1.4.1.850.1.1.3.4.1.2.1.4   The number of receptables supported by the ATS
#  tlpAtsIdentNumOutletGroups           .1.3.6.1.4.1.850.1.1.3.4.1.2.1.5   The number of receptable groups supported by the ATS
#  tlpAtsIdentNumCircuits               .1.3.6.1.4.1.850.1.1.3.4.1.2.1.6   The number of circuits supported by the ATS
#  tlpAtsIdentNumBreakers               .1.3.6.1.4.1.850.1.1.3.4.1.2.1.7   The number of bank breakers supported by the ATS
#  tlpAtsIdentNumHeatsinks              .1.3.6.1.4.1.850.1.1.3.4.1.2.1.8   The number of heatsink thermistors supported by the ATS









use strict;				#enforce good coding practices
use Getopt::Long;                       #allow --long-switches to be used as parameters.  Install with: perl -MCPAN -e 'install Getopt::Long'



# declare variables
my ($OK,$WARN,$CRITICAL,$UNKNOWN);
my ($CHECK_NAME,$cmd,$snmpwalk,$snmpget);
my ($host,$oid,$key,%pdu,$community,$temp_min_warn,$temp_min_crit,$temp_max_warn,$temp_max_crit);
my ($opt_h,$opt_v,$opt_w,$opt_c,$opt_C,$opt_H);
my ($verbose,$output_details,$perf_data);
$cmd = "";                                              #initialize variable
$CHECK_NAME                 = "Tripp-Lite ATS";		#name of nagios check
$verbose                    = "no";                    	#yes/no variable to increase output for debugging
$temp_min_warn              = 10;			#minimum degrees celsius for warning
$temp_min_crit              = 5;			#minimum degrees celsius for critical alert
$temp_max_warn              = 26;			#maximum degrees celsius for warning
$temp_max_crit              = 28;			#maximum degrees celsius for critical alert
$community                  = "public";  		#default SNMP community name
$output_details             = "";			#initialize variable to hold details of script output
$snmpwalk                   = "/usr/bin/snmpwalk";	#location of binary
$snmpget                    = "/usr/bin/snmpget";	#location of binary
#
# Nagios return codes
#
$OK=            0;
$WARN=          1;
$CRITICAL=      2;
$UNKNOWN=       3;




sub get_options {
   #
   # this gets the command line parameters provided by the users
   #
   print "running get_options subroutine \n" if ($verbose eq "yes");
   #
   Getopt::Long::Configure('bundling');
   GetOptions(
      "h"   => \$opt_h, "help"        => \$opt_h,
      "v"   => \$opt_v, "verbose"     => \$opt_v,
      "C=s" => \$opt_C, "community=s" => \$opt_C, "comm=s" => \$opt_C,
      "H=s" => \$opt_H, "hostname=s"  => \$opt_H, "host=s" => \$opt_H,
   );
   #
   #
   #
   # If the user supplied -h or --help, generate the help messages
   #
   if( defined( $opt_h ) ) {
      print "Nagios plugin for determining filesystem usage. \n";
      print "Examples: \n";
      print "   $0 --host=myfiler --community=public \n";
      print "   $0     -H myfiler          -C public \n";
      print "\n\n";
      exit $UNKNOWN;
   }
   #
   # If the user supplied -v or --verbose, increase verbosity for debugging
   if( defined( $opt_v ) ) {
      $verbose = "yes";
   } 
   #
   #
   # If the user did not supply a --community SNMP community string, use "public"
   #
   if( defined( $opt_C ) ) {
      $community = $opt_C;
   } else {
      $community = "public";
   }
   #
   # If the user did not supply a --host=??? , generate a warning
   #
   if( defined( $opt_H ) ) {
      $host = $opt_H;
   } else {
      print "$CHECK_NAME UNKNOWN - a remote host to check was not provided. Use this syntax: $0 -H hostname -C snmp_community\n";
      exit $CRITICAL;                                           #exit script
   }
   #
   print "host=$host community=$community \n" if ($verbose eq "yes");
}                       #end of subroutine





sub sanity_checks {
   #
   #
   print "running sanity_checks subroutine \n" if ($verbose eq "yes");
   #
   #
   if ( ! -f "$snmpwalk" ) {
      print "ERROR: Cannot find $snmpwalk \n";
      exit;
   }
   if ( ! -x "$snmpwalk" ) {
      print "ERROR: $snmpwalk is not executable by the current user\n";
      exit;
   }
   if ( ! -f "$snmpget" ) {
      print "ERROR: Cannot find $snmpget \n";
      exit;
   }
   if ( ! -x "$snmpget" ) {
      print "ERROR: $snmpget is not executable by the current user\n";
      exit;
   }
}                                                       #end of subroutine





sub check_ats_model_serial {
   #
   # Get the model and serial number 
   # This uses the TRIPPLITE-PRODUCTS MIB
   # 
   print "running check_ats_model_serial subroutine \n" if ($verbose eq "yes");
   #
   # Get the manufacturer
   $oid = ".1.3.6.1.4.1.850.1.1.1.2.1.4.1";                             
   $cmd = "$snmpget -Onq -v 1 -c $community $host $oid";
   print "   running command: $cmd \n" if ($verbose eq "yes");
   $pdu{tlpDeviceManufacturer} = "Unknown Manufacturer";		#initialize variable
   open(IN,"$cmd |");                                                   #get the index numbers of the LUNs
   while (<IN>) {                                                       #read a line from the command output
      s/\"//g;                                                          #get rid of quotation marks
      if ( /$oid ([a-zA-Z0-9_\- ]+)/ ) {  			
         $pdu{tlpDeviceManufacturer} = $1; 	           		#assign value to hash
         print "   Manufacturer: $pdu{tlpDeviceManufacturer} \n" if ($verbose eq "yes");
      }
   }                                                                    #end of while loop
   #
   # Get the model number
   $oid = ".1.3.6.1.4.1.850.1.1.1.2.1.5.1";                             
   $cmd = "$snmpget -Onq -v 1 -c $community $host $oid";
   print "   running command: $cmd \n" if ($verbose eq "yes");
   $pdu{tlpDeviceModel} = "Unknown Model";				#initialize variable
   open(IN,"$cmd |");                                                   #get the index numbers of the LUNs
   while (<IN>) {                                                       #read a line from the command output
      s/\"//g;                                                          #get rid of quotation marks
      if ( /$oid ([a-zA-Z0-9_ \-]+)/ ) {  			
         $pdu{tlpDeviceModel} = $1; 	  	         		#assign value to hash
         print "   Model: $pdu{tlpDeviceModel} \n" if ($verbose eq "yes");
      }
   }                                                                    #end of while loop
}									#end of subroutine 





sub check_ats_input_source {
   #
   # query the SNMP counters to see how many input sources the Automatic Transfer Switch supports
   # This uses the TRIPPLITE-PRODUCTS MIB
   # 
   # Potential values are:  1=other 2=none on battery 3=primaryUtility 4=bypassFeed 5=secondaryUtility 6=generator 7=flyweel 8=fuelcell
   #
   print "running check_ats_input_source subroutine \n" if ($verbose eq "yes");
   #
   $oid = ".1.3.6.1.4.1.850.1.1.3.4.1.2.1.1.1";                             
   $cmd = "$snmpget -Onq -v 1 -c $community $host $oid";
   print "   running command: $cmd \n" if ($verbose eq "yes");
   #
   $pdu{tlpAtsIdentNumInputs} = "unknown";				#initialize variable
   #
   open(IN,"$cmd |");                                                   #get the index numbers of the LUNs
   while (<IN>) {                                                       #read a line from the command output
      s/\"//g;                                                          #get rid of quotation marks
      if ( /$oid ([0-9]+)/ ) {	
         $pdu{tlpAtsIdentNumInputs} = $1; 		          	#assign value to hash
      }
      #
      print "   ATS input sources: $pdu{tlpAtsIdentNumInputs} \n" if ($verbose eq "yes");
   }                                                                    #end of while loop
}									#end of subroutine 








sub check_ats_alarms {
   #
   # query the SNMP counters for the UPS runtime remaining (in minutes)
   # This uses the TRIPPLITE-PRODUCTS MIB 
   #  tlpDeviceStatus.1           .1.3.6.1.4.1.850.1.1.1.2.1.10.1         The currently most critical alarm status for the device 0=none 1=critical 2=warning 3=info 4=status 5=offline 6=custom 7=configuration
   #
   print "running check_ats_alarms subroutine \n" if ($verbose eq "yes");
   #
   $oid = ".1.3.6.1.4.1.850.1.1.1.2.1.10.1";                             
   $cmd = "$snmpwalk -Onq -v 1 -c $community $host $oid";
   print "   running command: $cmd \n" if ($verbose eq "yes");
   #
   $pdu{tlpDeviceStatus} = "unknown";				#initialize variable

   #
   open(IN,"$cmd |");                                                   #get the index numbers of the LUNs
   while (<IN>) {                                                       #read a line from the command output
      s/\"//g;                                                          #get rid of quotation marks
      if ( /$oid 0/ ) { $pdu{tlpDeviceStatus} = "none"          };    	#assign value to hash
      if ( /$oid 1/ ) { $pdu{tlpDeviceStatus} = "critical"      };      #assign value to hash
      if ( /$oid 2/ ) { $pdu{tlpDeviceStatus} = "warning"       };      #assign value to hash
      if ( /$oid 3/ ) { $pdu{tlpDeviceStatus} = "info"          };    	#assign value to hash
      if ( /$oid 4/ ) { $pdu{tlpDeviceStatus} = "status"        };      #assign value to hash
      if ( /$oid 5/ ) { $pdu{tlpDeviceStatus} = "offline"       };      #assign value to hash
      if ( /$oid 6/ ) { $pdu{tlpDeviceStatus} = "custom"        };      #assign value to hash
      if ( /$oid 7/ ) { $pdu{tlpDeviceStatus} = "configuration" };      #assign value to hash
      print "   Alarm state: $pdu{tlpDeviceStatus} \n" if ($verbose eq "yes");
   }                                                                    #end of while loop
   close IN;                                                            #close filehandle
}                                                                       #end of subroutine








sub print_output {
   #
   # print output in the format expected by nagios
   #
   print "running print_output subroutine \n" if ($verbose eq "yes");
   #
   # The nagios performance data will be the same for all the outputs, so just put it in a variable that can be use by all the output options
   #
   # The format is:  label=value[UOM];[warn];[crit];[min];[max]
   # On the "label=value" section is required.  The warn|crit|min|max entries are optional.
   # You can have multiple items of perf data, just separate each section with a space
   # UOM is Units Of Measurement.    Can be s=seconds B=bytes MB=megabytes %=percent c=counter
   # You can use the standard nagios ranges and thresholds formats (examples below)
   # Range definition	Generate an alert if x...
   # ----------------   -------------------------
   # 10	                < 0 or > 10, (outside the range of {0 .. 10})
   # 10:	        < 10, (outside {10 .. ∞})
   # ~:10	        > 10, (outside the range of {-∞ .. 10})
   # 10:20	        < 10 or > 20, (outside the range of {10 .. 20})
   # @10:20	        ≥ 10 and ≤ 20, (inside the range of {10 .. 20})
   #
   $perf_data = "";
   #
   #
   # Much of the text of the output will be the same.  Put the common stuff in a variable so we can simplify the outputs
   #
   $output_details = "Model:$pdu{tlpDeviceManufacturer} $pdu{tlpDeviceModel},  Power input sources:$pdu{tlpAtsIdentNumInputs},  Alarm state:$pdu{tlpDeviceStatus}";
   #
   #
   #
   if ( $pdu{tlpDeviceStatus} ne "none" ) {
      print "$CHECK_NAME WARN - Automatic Transfer Switch is in an alarm state, please investigate.  $output_details | $perf_data \n";
      exit $WARN; 
   }
   #
   #
   # This message gets sent if everything is ok
   print "$CHECK_NAME OK - $output_details | $perf_data \n";
   exit $OK;
   #
   # The script should never get this far
   print "$CHECK_NAME UNKNOWN - Could not determine status.  Please investigate. $output_details | $perf_data \n";
   exit $UNKNOWN;
}                                                                       #end of subroutine





# --------------------------- main body of program ----------------------
get_options;
sanity_checks;
check_ats_model_serial;
check_ats_input_source;
check_ats_alarms;
print_output;




